{"version":3,"sources":["serviceWorker.js","types/actions.js","actions/boardActions.js","types/board.js","types/dnd.js","components/Dice.js","components/Slot.js","components/Requirement.js","components/Card.js","components/Board.js","App.js","reducers/util.js","store/store.js","types/pips.js","reducers/popReducer.js","content/requirements.js","content/cardStories.js","reducers/boardReducer.js","index.js","reducers/rootReducer.js"],"names":["Boolean","window","location","hostname","match","ActionType","Object","freeze","roll","moveRollToSlot","returnRoll","removeRollFromFailedCards","collectAllDiceToRoll","removeCard","addCard","delay","time","Promise","resolve","setTimeout","cardId","type","BoardActions","done","resolving","DragItemType","dice","Pip","pos","of","classes","join","className","Dice","faces","up","id","pips","useState","open","setOpen","useDrag","item","pipsType","begin","drag","renderPips","R","key","mapIndexed","onClick","ref","x","i","face","index","Slot","onDrop","selectedRoll","useDrop","accept","drop","canDrop","pop","Requirement","description","card","testCard","Card","title","slots","requirements","dispatch","useDispatch","slot","diceId","map","r","s","Board","freePops","useSelector","cards","nextAction","c","getState","a","waitTime","board","disabled","App","reducers","buildStoreFactory","createStore","applyMiddleware","thunk","composeWithDevTools","rootReducer","preloadedState","keepRefIfEqual","defaultValue","value","keepRefIfNoChange","fn","adjustOnCondition","condition","updater","adjustObjectProp","object","PipType","work","live","createStartingPop","uuid","initialPops","popsReducer","rootState","pops","isNotNill","getUpsideFace","isCardFullfilled","cardStories","min","diceCount","name","this","upside","createCard","initialBoard","Math","floor","random","findRollInCards","acc","findRollInSlots","undefined","removeRollFromFreePops","adjustCard","removeRollFromCards","findRollInFreePop","previusRoll","findCard","isCardFailed","removeRollsIfFailed","store","buildStore","action","state","reducer","ReactDOM","render","StrictMode","DndProvider","backend","DndBackend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53e9253e.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionType = Object.freeze({\r\n\troll: 'ROLL',\r\n\tmoveRollToSlot: 'MOVE_ROLL_TO_SLOT',\r\n\treturnRoll: 'RETURN_ROLL',\r\n\tremoveRollFromFailedCards: 'REMOVE_ROLL_FROM_FAILED_CARDS',\r\n\tcollectAllDiceToRoll: 'COLLECT_ALL_DICE_TO_ROLL',\r\n\r\n\tremoveCard: 'REMOVE_CARD',\r\n\taddCard: 'ADD_CARD',\r\n})\r\n","import { ActionType } from '../types/actions'\r\n\r\nexport const roll = () => ({\r\n\ttype: ActionType.roll,\r\n})\r\n\r\nexport const moveRollToSlot = ({diceId, cardId, slot}) => ({\r\n\ttype: ActionType.moveRollToSlot,\r\n\tdiceId,\r\n\tcardId,\r\n\tslot,\r\n})\r\n\r\nexport const returnRoll = diceId => ({\r\n\ttype: ActionType.returnRoll,\r\n\tdiceId,\r\n})\r\n\r\nconst delay = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nconst removeRollFromFailedCards = () => ({\r\n\ttype: ActionType.removeRollFromFailedCards,\r\n})\r\n\r\nconst collectAllDiceToRoll = () => ({\r\n\ttype: ActionType.collectAllDiceToRoll,\r\n})\r\n\r\nexport const done = () => async (dispatch, getState) => {\r\n\tconst waitTime = 1000\r\n\tdispatch(removeRollFromFailedCards())\r\n\tawait delay(waitTime)\r\n\tconst cards = getState().board.cards\r\n\tfor(const card of cards){\r\n\t\tcard.resolve(dispatch)\r\n\t\tawait delay(waitTime)\r\n\t}\r\n\tdispatch(collectAllDiceToRoll())\r\n}\r\n\r\nexport const removeCard = cardId => ({\r\n\ttype: ActionType.removeCard,\r\n\tcardId,\r\n})\r\n\r\nexport const addCard = name => ({\r\n\ttype: ActionType.addCard,\r\n\tname,\r\n})\r\n","export const BoardActions = Object.freeze({\r\n\troll: 'ROLL',\r\n\tdone: 'DONE',\r\n\tresolving: 'resolving',\r\n})\r\n","export const DragItemType = Object.freeze({\r\n\tdice: 'DICE',\r\n})\r\n","import React, { useState } from 'react'\r\nimport * as R from 'ramda'\r\nimport { useDrag } from 'react-dnd'\r\nimport './Dice.css'\r\n\r\nimport { DragItemType } from '../types/dnd'\r\n\r\nconst Pip = ({pos, of, type}) => {\r\n\tconst classes = [\r\n\t\t'pip',\r\n\t\t`pip${pos}of${of}`,\r\n\t\t`pip-${type}`,\r\n\t].join(' ')\r\n\treturn <div className={classes}></div>\r\n}\r\n\r\nconst Dice = ({faces, up, id}) => {\r\n\tconst {pips, type} = faces[up]\r\n\tconst [open, setOpen] = useState(false)\r\n\tconst toggleOpen = () => setOpen(!open)\r\n\r\n\tconst [, drag] = useDrag({\r\n\t\titem: {\r\n\t\t\ttype: DragItemType.dice,\r\n\t\t\tid,\r\n\t\t\tup,\r\n\t\t\tpips,\r\n\t\t\tpipsType: type,\r\n\t\t},\r\n\t\tbegin: () => {\r\n\t\t\tsetOpen(false)\r\n\t\t},\r\n\t})\r\n\r\n\tconst renderPips = (pips, type) => R.pipe(\r\n\t\tR.always(R.range(1, pips + 1)),\r\n\t\tR.map(pos => <Pip type={type} pos={pos} of={pips} key={pos} />),\r\n\t)()\r\n\r\n\tconst mapIndexed = R.addIndex(R.map)\r\n\tconst renderOtherFaces = () => {\r\n\t\treturn R.pipe(\r\n\t\t\tR.always(R.range(0, 6)),\r\n\t\t\tR.filter(x => x !== up),\r\n\t\t\tR.insert(2, up),\r\n\t\t\tR.map(i => faces[i]),\r\n\t\t\tmapIndexed((face, index) => <div className={`dice dice-ghost dice-ghost${index}`} key={index}>\r\n\t\t\t\t{face && renderPips(face.pips, face.type)}\r\n\t\t\t</div>),\r\n\t\t)()\r\n\t}\r\n\r\n\treturn <div\r\n\t\tclassName={`dice ${open ? 'dice-open' : ''}`}\r\n\t\tonClick={toggleOpen}\r\n\t\tref={drag}\r\n\t>\r\n\t\t{renderPips(pips, type)}\r\n\r\n\t\t{open && renderOtherFaces()}\r\n\t</div>\r\n}\r\n\r\nexport default Dice\r\n","import React from 'react'\r\nimport { useDrop } from 'react-dnd'\r\n\r\nimport { DragItemType } from '../types/dnd'\r\nimport Dice from './Dice'\r\n\r\nconst Slot = ({onDrop, selectedRoll}) => {\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: DragItemType.dice,\r\n\t\tdrop: onDrop,\r\n\t\tcanDrop: item => true,\r\n\t})\r\n\treturn <div\r\n\t\tclassName=\"slot\"\r\n\t\tref={drop}\r\n\t>\r\n\t\t{selectedRoll && <Dice up={selectedRoll.up} faces={selectedRoll.pop.faces} id={selectedRoll.pop.id} />}\r\n\t</div>\r\n}\r\n\r\nexport default Slot\r\n","import React from 'react'\r\nimport './Requirement.css'\r\n\r\nconst Requirement = ({description, card, testCard}) => {\r\n\tconst classes = [\r\n\t\t'requirement',\r\n\t\ttestCard(card) ? 'requirement-fullfilled' : 'requirement-failed',\r\n\t].join(' ')\r\n\treturn <p className={classes}>{description}</p>\r\n}\r\n\r\nexport default Requirement\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport './Card.css'\r\n\r\nimport Slot from './Slot'\r\nimport Requirement from './Requirement'\r\nimport { moveRollToSlot } from '../actions/boardActions'\r\n\r\nconst Card = (card) => {\r\n\tconst {title, description, slots, id, requirements} = card\r\n\tconst dispatch = useDispatch()\r\n\tconst onDrop = slot => item => dispatch(moveRollToSlot({\r\n\t\tdiceId: item.id,\r\n\t\tcardId: id,\r\n\t\tslot,\r\n\t}))\r\n\treturn <div className=\"card\">\r\n\t\t<h2>{title}</h2>\r\n\t\t<p>{description}</p>\r\n\t\t<div className=\"requirements\">\r\n\t\t\t{requirements.map((r, i) => <Requirement {...r} card={card} key={i} />)}\r\n\t\t</div>\r\n\t\t<div className=\"slots\">\r\n\t\t\t{slots.map((s, i) => <Slot {...s} onDrop={onDrop(i)} key={i} />)}\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport * as R from 'ramda'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useDrop } from 'react-dnd'\r\nimport './Board.css'\r\n\r\nimport { roll, done, returnRoll } from '../actions/boardActions'\r\nimport { BoardActions } from '../types/board'\r\nimport { DragItemType } from '../types/dnd'\r\nimport Dice from './Dice'\r\nimport Card from './Card'\r\n\r\nconst Board = () => {\r\n\tconst freePops = useSelector(R.path(['board', 'freePops']))\r\n\tconst cards = useSelector(R.path(['board', 'cards']))\r\n\tconst nextAction = useSelector(R.path(['board', 'nextAction']))\r\n\tconst dispatch = useDispatch()\r\n\tconst dispatchRoll = () => dispatch(roll())\r\n\tconst dispatchDone = () => dispatch(done())\r\n\tconst onReturn = item => dispatch(returnRoll(item.id))\r\n\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: DragItemType.dice,\r\n\t\tdrop: onReturn,\r\n\t})\r\n\r\n\treturn <main className=\"board\">\r\n\t\t<div className=\"cards\">\r\n\t\t\t{cards && cards.map(c => <Card {...c} key={c.id} />)}\r\n\t\t</div>\r\n\t\t{nextAction === BoardActions.roll && <button onClick={dispatchRoll}>Roll</button>}\r\n\t\t{nextAction === BoardActions.done && <button onClick={dispatchDone}>Done</button>}\r\n\t\t{nextAction === BoardActions.resolving && <button disabled>resolving</button>}\r\n\t\t<div\r\n\t\t\tclassName=\"free-pops\"\r\n\t\t\tref={drop}\r\n\t\t>\r\n\t\t\t{freePops && freePops.map(({up, pop: {faces, id}}) => <Dice up={up} faces={faces} id={id} key={id} />)}\r\n\t\t</div>\r\n\t</main>\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\nimport './App.css'\n\nimport Board from './components/Board'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>Dice Town</h1>\n\t\t\t</header>\n\t\t\t<Board />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import * as R from 'ramda'\r\n\r\nexport const keepRefIfEqual = defaultValue => value =>\r\n\tR.equals(value, defaultValue) ? defaultValue : value\r\n\r\nexport const keepRefIfNoChange = fn => x => R.pipe(fn, keepRefIfEqual(x))(x)\r\n\r\nexport const adjustOnCondition = (condition, updater) => keepRefIfNoChange(\r\n\tR.map(x => {\r\n\t\tif(condition(x)){\r\n\t\t\treturn updater(x)\r\n\t\t}\r\n\t\treturn x\r\n\t}),\r\n)\r\n\r\nexport const adjustObjectProp = (key, updater) => keepRefIfNoChange(object => ({\r\n\t...object,\r\n\t[key]: updater(object[key]),\r\n}))\r\n\r\nexport const combineReducers = (reducers) => (state, action) => {\r\n\treturn R.pipe(\r\n\t\tR.map(reducer => reducer(state, action)),\r\n\t\tkeepRefIfEqual(state),\r\n\t)(reducers)\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\r\n\r\nexport const buildStoreFactory = ({\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}) => ({\r\n\trootReducer,\r\n\tpreloadedState,\r\n}) => createStore(\r\n\trootReducer,\r\n\tpreloadedState,\r\n\tcomposeWithDevTools({})(applyMiddleware(thunk)),\r\n)\r\n\r\nexport const injectedDependencies = {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}\r\n\r\nexport default buildStoreFactory(injectedDependencies)\r\n","export const PipType = Object.freeze({\r\n\twork: 'work',\r\n\tlive: 'live',\r\n})\r\n","import { uuid } from 'uuidv4'\r\n\r\nimport { PipType } from '../types/pips'\r\n\r\nconst createStartingPop = () => {\r\n\treturn {\r\n\t\tid: uuid(),\r\n\t\tfaces: [\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 6, type: PipType.live},\r\n\t\t],\r\n\t}\r\n}\r\n\r\nconst initialPops = [\r\n\tcreateStartingPop(),\r\n\tcreateStartingPop(),\r\n]\r\n\r\nconst popsReducer = (rootState = {}, action = {}) => {\r\n\tconst { pops = initialPops } = rootState\r\n\treturn pops\r\n}\r\n\r\nexport default popsReducer\r\n","import * as R from 'ramda'\r\n\r\nimport { PipType } from '../types/pips'\r\n\r\nexport const minDiceCount = min => ({\r\n\tdescription: `min ${min} dice`,\r\n\ttestCard: R.pipe(\r\n\t\tR.prop('slots'),\r\n\t\tR.map(slot => slot.selectedRoll ? 1 : 0),\r\n\t\tR.sum,\r\n\t\tdiceCount => diceCount >= min,\r\n\t),\r\n})\r\n\r\nconst isNotNill = R.complement(R.isNil)\r\nconst getUpsideFace = roll => roll.pop.faces[roll.up]\r\n\r\nexport const minWorkCount = min => ({\r\n\tdescription: `min ${min} work`,\r\n\ttestCard: R.pipe(\r\n\t\tR.prop('slots'),\r\n\t\tR.filter(R.propSatisfies(isNotNill, 'selectedRoll')),\r\n\t\tR.map(slot => slot.selectedRoll),\r\n\t\tR.map(getUpsideFace),\r\n\t\tR.filter(upside => upside.type === PipType.work),\r\n\t\tR.map(upside => upside.pips),\r\n\t\tR.sum,\r\n\t\tdiceCount => diceCount >= min,\r\n\t),\r\n})\r\n","import * as R from 'ramda'\r\nimport { uuid } from 'uuidv4'\r\n\r\nimport { minDiceCount, minWorkCount } from './requirements'\r\nimport { removeCard, addCard } from '../actions/boardActions'\r\n\r\nconst isCardFullfilled = card => R.all(({testCard}) => testCard(card), card.requirements)\r\n\r\nconst cardStories = Object.freeze({\r\n\t'intro 1': () => ({\r\n\t\ttitle: 'Place a citizen',\r\n\t\tdescription: 'The dice are your citizens and you can place them after rolling',\r\n\t\tslots: [{}, {}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('intro 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'intro 2': () => ({\r\n\t\ttitle: 'To many needed',\r\n\t\tdescription: 'Sometimes you can not meet the cards requirement',\r\n\t\tslots: [{}, {}],\r\n\t\trequirements: [minWorkCount(3)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n})\r\n\r\nexport const createCard = (name) => {\r\n\treturn {\r\n\t\tid: uuid(),\r\n\t\tname,\r\n\t\t...cardStories[name](),\r\n\t}\r\n}\r\n","import * as R from 'ramda'\r\n\r\nimport { ActionType } from '../types/actions'\r\nimport { BoardActions } from '../types/board'\r\nimport { adjustOnCondition, adjustObjectProp } from './util'\r\nimport { createCard } from '../content/cardStories'\r\n\r\nconst initialBoard = {\r\n\tnextAction: BoardActions.roll,\r\n\tfreePops: [],\r\n\t//FIXME: change back to 'intro 1', just cheating for testing\r\n\t// cards: [createCard('intro 1')],\r\n\tcards: [createCard('intro 2')],\r\n}\r\n\r\nconst roll = (board, pops) => {\r\n\tif(board.nextAction !== BoardActions.roll){\r\n\t\treturn board\r\n\t}\r\n\treturn {\r\n\t\t...board,\r\n\t\tnextAction: BoardActions.done,\r\n\t\tfreePops: pops.map(pop => ({\r\n\t\t\tpop,\r\n\t\t\tup: Math.floor(Math.random()*6),\r\n\t\t})),\r\n\t}\r\n}\r\n\r\nconst findRollInFreePop = diceId => R.find(({pop}) => pop.id === diceId)\r\nconst findRollInSlots = diceId => R.pipe(\r\n\tR.map(R.prop('selectedRoll')),\r\n\tR.find(roll => (roll && roll.pop.id === diceId)),\r\n)\r\nconst findRollInCards = diceId => R.reduce((acc, {slots}) => acc || findRollInSlots(diceId)(slots), undefined)\r\nconst removeRollFromFreePops = diceId => R.filter(({pop}) => pop.id !== diceId)\r\n\r\nconst findCard = cardId => R.find(({id}) => id === cardId)\r\nconst adjustCard = (cardId, fn) => adjustOnCondition(({id}) => id === cardId, fn)\r\nconst removeRollFromCards = diceId => adjustOnCondition(\r\n\tcard => R.any(slot => slot.selectedRoll && slot.selectedRoll.pop.id === diceId)(card.slots),\r\n\tadjustObjectProp('slots', adjustOnCondition(\r\n\t\t({selectedRoll}) => selectedRoll && selectedRoll.pop.id === diceId,\r\n\t\tadjustObjectProp('selectedRoll', () => undefined),\r\n\t)),\r\n)\r\n\r\nconst moveRollToSlot = ({diceId, cardId, slot}) => board => {\r\n\tconst roll = findRollInFreePop(diceId)(board.freePops)\r\n\t\t|| findRollInCards(diceId)(board.cards)\r\n\tconst card = findCard(cardId)(board.cards)\r\n\tconst previusRoll = card.slots[slot].selectedRoll\r\n\tif(previusRoll === roll || board.nextAction !== BoardActions.done){\r\n\t\treturn board\r\n\t}\r\n\treturn R.evolve({\r\n\t\tfreePops: R.pipe(\r\n\t\t\tremoveRollFromFreePops(diceId),\r\n\t\t\tR.when(() => previusRoll, R.append(previusRoll)),\r\n\t\t),\r\n\t\tcards: R.pipe(\r\n\t\t\tremoveRollFromCards(diceId),\r\n\t\t\tadjustCard(cardId,\r\n\t\t\t\tadjustObjectProp('slots', R.adjust(slot, adjustObjectProp('selectedRoll', () => roll))),\r\n\t\t\t),\r\n\t\t),\r\n\t})(board)\r\n}\r\n\r\nconst returnRoll = diceId => board => {\r\n\tconst roll = findRollInCards(diceId)(board.cards)\r\n\tif(!roll || board.nextAction !== BoardActions.done){\r\n\t\treturn board\r\n\t}\r\n\treturn R.evolve({\r\n\t\tfreePops: R.append(roll),\r\n\t\tcards: removeRollFromCards(diceId),\r\n\t})(board)\r\n}\r\n\r\nconst isCardFullfilled = card => R.all(({testCard}) => testCard(card), card.requirements)\r\nconst isCardFailed = R.complement(isCardFullfilled)\r\nconst isNotNill = R.complement(R.isNil)\r\nconst addFailedCardsRolls =cards => R.concat(R.pipe(\r\n\tR.always(cards),\r\n\tR.filter(isCardFailed),\r\n\tR.map(R.prop('slots')),\r\n\tR.flatten,\r\n\tR.filter(R.propSatisfies(isNotNill, 'selectedRoll')),\r\n\tR.map(R.prop('selectedRoll')),\r\n)())\r\nconst removeRollsIfFailed = R.map(\r\n\tR.when(\r\n\t\tisCardFailed,\r\n\t\tadjustObjectProp('slots',\r\n\t\t\tR.map(adjustObjectProp('selectedRoll', () => undefined)),\r\n\t\t),\r\n\t),\r\n)\r\n\r\nconst removeRollFromFailedCards = board => {\r\n\treturn R.evolve({\r\n\t\tnextAction: () => BoardActions.resolving,\r\n\t\tfreePops: addFailedCardsRolls(board.cards),\r\n\t\tcards: removeRollsIfFailed,\r\n\t})(board)\r\n}\r\n\r\nconst collectAllDiceToRoll = R.evolve({\r\n\tnextAction: () => BoardActions.roll,\r\n\tfreePops: () => [],\r\n\tcards: R.map(adjustObjectProp('slots',\r\n\t\tR.map(adjustObjectProp('selectedRoll', () => undefined)),\r\n\t)),\r\n})\r\n\r\nconst removeCard = cardId => R.evolve({\r\n\tcards: R.filter(card => card.id !== cardId),\r\n})\r\n\r\nconst addCard = name => R.evolve({\r\n\tcards: R.append(createCard(name)),\r\n})\r\n\r\nconst boardReducer = (rootState = {}, action = {}) => {\r\n\tconst { board = initialBoard, pops } = rootState\r\n\tconst { type, diceId, cardId, slot, name } = action\r\n\tswitch(type){\r\n\tcase ActionType.roll:\r\n\t\treturn roll(board, pops)\r\n\tcase ActionType.moveRollToSlot:\r\n\t\treturn moveRollToSlot({diceId, cardId, slot})(board)\r\n\tcase ActionType.returnRoll:\r\n\t\treturn returnRoll(diceId)(board)\r\n\tcase ActionType.removeRollFromFailedCards:\r\n\t\treturn removeRollFromFailedCards(board)\r\n\tcase ActionType.collectAllDiceToRoll:\r\n\t\treturn collectAllDiceToRoll(board)\r\n\tcase ActionType.removeCard:\r\n\t\treturn removeCard(cardId)(board)\r\n\tcase ActionType.addCard:\r\n\t\treturn addCard(name)(board)\r\n\tdefault:\r\n\t\treturn board\r\n\t}\r\n}\r\n\r\nexport default boardReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { DndProvider } from 'react-dnd'\nimport DndBackend from 'react-dnd-html5-backend'\nimport './index.css'\n\nimport App from './App'\nimport buildStore from './store/store'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = buildStore({\n\trootReducer,\n\tpreloadedState: undefined,\n})\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<DndProvider backend={DndBackend}>\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t</DndProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { combineReducers } from './util'\r\nimport popsReducer from './popReducer'\r\nimport boardReducer from './boardReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\tpops: popsReducer,\r\n\tboard: boardReducer,\r\n})\r\n\r\nexport default rootReducer\r\n"],"sourceRoot":""}