{"version":3,"sources":["serviceWorker.js","types/actions.js","actions/boardActions.js","types/board.js","types/dnd.js","components/Dice.js","components/Requirement.js","components/Slot.js","components/Card.js","components/Board.js","App.js","reducers/util.js","store/store.js","types/pips.js","reducers/popReducer.js","content/requirements.js","actions/popActions.js","content/cardStories.js","reducers/boardReducer.js","index.js","reducers/rootReducer.js"],"names":["Boolean","window","location","hostname","match","ActionType","Object","freeze","roll","moveRollToSlot","returnRoll","removeRollFromFailedCards","collectAllDiceToRoll","removeCard","addCard","updatePips","removePop","addPop","diceId","cardId","slot","force","type","delay","time","Promise","resolve","setTimeout","name","BoardActions","done","resolving","DragItemType","dice","Pip","pos","of","classes","join","className","Dice","faces","up","id","pips","useState","open","setOpen","useDrag","item","pipsType","begin","drag","renderPips","R","key","mapIndexed","onClick","ref","x","i","face","index","Requirement","description","card","testCard","push","Slot","onDrop","selectedRoll","requirements","useDrop","accept","drop","canDrop","r","testItem","pop","map","Card","title","slots","dispatch","useDispatch","s","Board","freePops","useSelector","cards","nextAction","c","getState","a","waitTime","board","disabled","App","reducers","buildStoreFactory","createStore","applyMiddleware","thunk","composeWithDevTools","rootReducer","preloadedState","keepRefIfEqual","defaultValue","value","keepRefIfNoChange","fn","adjustOnCondition","condition","updater","adjustObjectProp","object","PipType","work","life","createStartingPop","uuid","initialPops","popId","popsReducer","rootState","action","pops","minDiceCount","min","diceCount","isNotNill","getUpsideFace","minWorkCount","upside","minWork","testRoll","this","minLife","isCardFullfilled","cardStories","max","entries","slotIndex","victim","selected","createCard","initialBoard","Math","floor","random","findRollInCards","acc","findRollInSlots","undefined","removeRollFromFreePops","adjustCard","removeRollFromCards","findRollInFreePop","previusRoll","findCard","isCardFailed","removeRollsIfFailed","store","buildStore","state","reducer","ReactDOM","render","StrictMode","DndProvider","backend","DndBackend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAaoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0GCnBOC,EAAaC,OAAOC,OAAO,CACvCC,KAAM,OACNC,eAAgB,oBAChBC,WAAY,cACZC,0BAA2B,gCAC3BC,qBAAsB,2BAEtBC,WAAY,cACZC,QAAS,WAETC,WAAY,cACZC,UAAW,aACXC,OAAQ,YCNIR,EAAiB,SAAC,GAAD,IAAES,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,KAAlB,IAAwBC,aAAxB,eAA0C,CACvEC,KAAMjB,EAAWI,eACjBS,SACAC,SACAC,OACAC,UAQKE,EAAQ,SAAAC,GAAI,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAsBpDX,EAAa,SAAAM,GAAM,MAAK,CACpCG,KAAMjB,EAAWQ,WACjBM,WAGYL,EAAU,SAAAc,GAAI,MAAK,CAC/BN,KAAMjB,EAAWS,QACjBc,SChDYC,EAAevB,OAAOC,OAAO,CACzCC,KAAM,OACNsB,KAAM,OACNC,UAAW,cCHCC,EAAe1B,OAAOC,OAAO,CACzC0B,KAAM,S,gECMDC,G,MAAM,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,GAAId,EAAU,EAAVA,KAChBe,EAAU,CACf,MADe,aAETF,EAFS,aAEDC,GAFC,cAGRd,IACNgB,KAAK,KACP,OAAO,yBAAKC,UAAWF,MAkDTG,EA/CF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,GAAQ,EACZF,EAAMC,GAApBE,EAD0B,EAC1BA,KAAMtB,EADoB,EACpBA,KADoB,EAETuB,oBAAS,GAFA,mBAE1BC,EAF0B,KAEpBC,EAFoB,OAKhBC,YAAQ,CACxBC,KAAM,CACL3B,KAAMU,EAAaC,KACnBU,KACAD,KACAE,OACAM,SAAU5B,GAEX6B,MAAO,WACNJ,GAAQ,MATDK,EALwB,oBAkB3BC,EAAa,SAACT,EAAMtB,GAAP,OAAgBgC,IAClCA,IAASA,IAAQ,EAAGV,EAAO,IAC3BU,KAAM,SAAAnB,GAAG,OAAI,kBAAC,EAAD,CAAKb,KAAMA,EAAMa,IAAKA,EAAKC,GAAIQ,EAAMW,IAAKpB,OAFrBmB,IAK7BE,EAAaF,IAAWA,KAa9B,OAAO,yBACNf,UAAS,eAAUO,EAAO,YAAc,IACxCW,QAnCkB,kBAAMV,GAASD,IAoCjCY,IAAKN,GAEJC,EAAWT,EAAMtB,GAEjBwB,GAlBMQ,IACNA,IAASA,IAAQ,EAAG,IACpBA,KAAS,SAAAK,GAAC,OAAIA,IAAMjB,KACpBY,IAAS,EAAGZ,GACZY,KAAM,SAAAM,GAAC,OAAInB,EAAMmB,MACjBJ,GAAW,SAACK,EAAMC,GAAP,OAAiB,yBAAKvB,UAAS,oCAA+BuB,GAASP,IAAKO,GACrFD,GAAQR,EAAWQ,EAAKjB,KAAMiB,EAAKvC,UAN/BgC,K,gBC5BMS,G,MAVK,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAClC7B,EAAU,CACf,eAKD,OAHG6B,GAAYD,GACd5B,EAAQ8B,KAAKD,EAASD,GAAQ,yBAA2B,sBAEnD,uBAAG1B,UAAWF,EAAQC,KAAK,MAAO0B,KCsB3BI,EAxBF,SAAChD,GAAU,IAChBiD,EAAsCjD,EAAtCiD,OAAQC,EAA8BlD,EAA9BkD,aAAcC,EAAgBnD,EAAhBmD,aADP,EAELC,YAAQ,CACxBC,OAAQzC,EAAaC,KACrByC,KAAML,EACNM,QAAS,SAAA1B,GACR,OAAGsB,GACKjB,KAAM,SAAAsB,GAAC,OAAIA,EAAEC,SAAS5B,KAAOsB,MAL9BG,EAFa,oBAYtB,OAAO,yBACNnC,UAAU,OACVmB,IAAKgB,GAEJJ,GAAgB,kBAAC,EAAD,CAAM5B,GAAI4B,EAAa5B,GAAID,MAAO6B,EAAaQ,IAAIrC,MAAOE,GAAI2B,EAAaQ,IAAInC,MAC9F2B,GAAgBC,GAAgB,yBAAKhC,UAAU,gBAC/CgC,EAAaQ,KAAI,SAACH,EAAGhB,GAAJ,OAAU,kBAAC,EAAD,iBAAiBgB,EAAjB,CAAoBrB,IAAKK,WCEzCoB,EApBF,SAACf,GAAU,IAChBgB,EAA+ChB,EAA/CgB,MAAOjB,EAAwCC,EAAxCD,YAAakB,EAA2BjB,EAA3BiB,MAAOvC,EAAoBsB,EAApBtB,GAAI4B,EAAgBN,EAAhBM,aAChCY,EAAWC,cAMjB,OAAO,yBAAK7C,UAAU,QACrB,4BAAK0C,GACL,2BAAIjB,GACJ,yBAAKzB,UAAU,gBACbgC,EAAaQ,KAAI,SAACH,EAAGhB,GAAJ,OAAU,kBAAC,EAAD,iBAAiBgB,EAAjB,CAAoBX,KAAMA,EAAMV,IAAKK,SAElE,yBAAKrB,UAAU,SACb2C,EAAMH,KAAI,SAACM,EAAGzB,GAAJ,OAAU,kBAAC,EAAD,iBAAUyB,EAAV,CAAahB,QAZrBjD,EAYoCwC,EAZ5B,SAAAX,GAAI,OAAIkC,EAAS1E,EAAe,CACtDS,OAAQ+B,EAAKN,GACbxB,OAAQwB,EACRvB,YASsDmC,IAAKK,KAZ7C,IAAAxC,QC+BDkE,EA9BD,WACb,IAAMC,EAAWC,YAAYlC,IAAO,CAAC,QAAS,cACxCmC,EAAQD,YAAYlC,IAAO,CAAC,QAAS,WACrCoC,EAAaF,YAAYlC,IAAO,CAAC,QAAS,gBAC1C6B,EAAWC,cAJE,EASFZ,YAAQ,CACxBC,OAAQzC,EAAaC,KACrByC,KAJgB,SAAAzB,GAAI,OAAIkC,GPLAjE,EOKoB+B,EAAKN,GPLd,CACpCrB,KAAMjB,EAAWK,WACjBQ,YAFyB,IAAAA,KOOhBwD,EATU,oBAcnB,OAAO,0BAAMnC,UAAU,SACtB,yBAAKA,UAAU,SACbkD,GAASA,EAAMV,KAAI,SAAAY,GAAC,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAapC,IAAKoC,EAAEhD,UAE7C+C,IAAe7D,EAAarB,MAAQ,4BAAQiD,QAbzB,kBAAM0B,EPfD,CAC1B7D,KAAMjB,EAAWG,SO2BqB,QACpCkF,IAAe7D,EAAaC,MAAQ,4BAAQ2B,QAbzB,kBAAM0B,EPWR,uCAAM,WAAOA,EAAUS,GAAjB,2BAAAC,EAAA,6DACnBC,EAAW,IACjBX,EAVwC,CACxC7D,KAAMjB,EAAWM,4BAOQ,SAGnBY,EAAMuE,GAHa,SAIGF,IAAWG,MAA/BN,EAJiB,EAIjBA,MAAOF,EAJU,EAIVA,SAJU,cAKPE,GALO,gEAKfxB,EALe,kBAMlBA,EAAKvC,QAAQyD,EAAUI,GANL,yBAOlBhE,EAAMuE,GAPY,+IASzBX,EAbmC,CACnC7D,KAAMjB,EAAWO,uBAGQ,gEAAN,2DOEmB,QACpC8E,IAAe7D,EAAaE,WAAa,4BAAQiE,UAAQ,GAAhB,aAC1C,yBACCzD,UAAU,YACVmB,IAAKgB,GAEJa,GAAYA,EAASR,KAAI,gBAAErC,EAAF,EAAEA,GAAF,IAAMoC,IAAMrC,EAAZ,EAAYA,MAAOE,EAAnB,EAAmBA,GAAnB,OAA4B,kBAAC,EAAD,CAAMD,GAAIA,EAAID,MAAOA,EAAOE,GAAIA,EAAIY,IAAKZ,UCrBnFsD,ICKiBC,EDLjBD,EAXf,WACC,OACC,yBAAK1D,UAAU,OACd,4BAAQA,UAAU,cACjB,0CAED,kBAAC,EAAD,Q,wBEcY4D,EArBkB,SAAC,GAAD,IAChCC,EADgC,EAChCA,YACAC,EAFgC,EAEhCA,gBACAC,EAHgC,EAGhCA,MACAC,EAJgC,EAIhCA,oBAJgC,OAK3B,gBACLC,EADK,EACLA,YACAC,EAFK,EAELA,eAFK,OAGAL,EACLI,EACAC,EACAF,EAAoB,GAApBA,CAAwBF,EAAgBC,MAU1BH,CAPqB,CACnCC,0BACAC,kCACAC,UACAC,4C,wBDpBYG,EAAiB,SAAAC,GAAY,OAAI,SAAAC,GAAK,OAClDtD,IAASsD,EAAOD,GAAgBA,EAAeC,IAEnCC,EAAoB,SAAAC,GAAE,OAAI,SAAAnD,GAAC,OAAIL,IAAOwD,EAAIJ,EAAe/C,GAA1BL,CAA8BK,KAE7DoD,EAAoB,SAACC,EAAWC,GAAZ,OAAwBJ,EACxDvD,KAAM,SAAAK,GACL,OAAGqD,EAAUrD,GACLsD,EAAQtD,GAETA,OAIIuD,EAAmB,SAAC3D,EAAK0D,GAAN,OAAkBJ,GAAkB,SAAAM,GAAM,sBACtEA,EADsE,eAExE5D,EAAM0D,EAAQE,EAAO5D,U,yBElBV6D,GAAU9G,OAAOC,OAAO,CACpC8G,KAAM,OACNC,KAAM,SCKDC,GAAoB,WACzB,MAAO,CACN5E,GAAI6E,kBACJ/E,MAAO,CACN,CAACG,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQE,SAmBrBG,GAAc,CACnBF,KACAA,KACAA,MAGKxG,GAAa,SAAC,GAAD,IAAE2G,EAAF,EAAEA,MAAO7D,EAAT,EAASA,KAAMjB,EAAf,EAAeA,KAAMM,EAArB,EAAqBA,SAArB,OAAmC6D,GACrD,SAAAjC,GAAG,OAAIA,EAAInC,KAAO+E,IAClBR,EAAiB,QAChB5D,IAASO,EAAM,CACdjB,OACAtB,KAAM4B,OAKHlC,GAAY,SAAA0G,GAAK,OAAIpE,KAAS,SAAAwB,GAAG,OAAIA,EAAInC,KAAO+E,MAEhDzG,GAAS,kBAAMqC,IA/Bb,CACNX,GAAI6E,kBACJ/E,MAAO,CACN,CAACG,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQC,MACxB,CAACzE,KAAM,EAAGtB,KAAM8F,GAAQE,UAwCZK,GAfK,WAAkC,IAAjCC,EAAgC,uDAApB,GAAIC,EAAgB,uDAAP,GAAO,EACrBD,EAAvBE,YAD4C,MACrCL,GADqC,EAE5CnG,EAAsCuG,EAAtCvG,KAAMoG,EAAgCG,EAAhCH,MAAO7D,EAAyBgE,EAAzBhE,KAAMjB,EAAmBiF,EAAnBjF,KAAMM,EAAa2E,EAAb3E,SACjC,OAAO5B,GACP,KAAKjB,EAAWU,WACf,OAAOA,GAAW,CAAC2G,QAAO7D,OAAMjB,OAAMM,YAA/BnC,CAA0C+G,GAClD,KAAKzH,EAAWW,UACf,OAAOA,GAAU0G,EAAV1G,CAAiB8G,GACzB,KAAKzH,EAAWY,OACf,OAAOA,KAAS6G,GACjB,QACC,OAAOA,I,2IC9DIC,GAAe,SAAAC,GAAG,MAAK,CACnChE,YAAY,OAAD,OAASgE,EAAT,SACX9D,SAAUZ,IACTA,KAAO,SACPA,KAAM,SAAAlC,GAAI,OAAIA,EAAKkD,aAAe,EAAI,KACtChB,MACA,SAAA2E,GAAS,OAAIA,GAAaD,OAItBE,GAAY5E,KAAaA,MACzB6E,GAAgB,SAAA3H,GAAI,OAAIA,EAAKsE,IAAIrC,MAAMjC,EAAKkC,KAErC0F,GAAe,SAAAJ,GAAG,MAAK,CACnChE,YAAY,OAAD,OAASgE,EAAT,SACX9D,SAAUZ,IACTA,KAAO,SACPA,IAASA,KAAgB4E,GAAW,iBACpC5E,KAAM,SAAAlC,GAAI,OAAIA,EAAKkD,gBACnBhB,IAAM6E,IACN7E,KAAS,SAAA+E,GAAM,OAAIA,EAAO/G,OAAS8F,GAAQC,QAC3C/D,KAAM,SAAA+E,GAAM,OAAIA,EAAOzF,QACvBU,MACA,SAAA2E,GAAS,OAAIA,GAAaD,OAIfM,GAAU,SAAAN,GAAG,MAAK,CAC9BhE,YAAY,OAAD,OAASgE,EAAT,SACXnD,SAAU,gBAAEjC,EAAF,EAAEA,KAAF,SAAQM,WAA2BkE,GAAQC,MAAQzE,GAAQoF,GACrEO,SAAU,YAAgC,IAAtB7F,EAAqB,EAArBA,GACb2F,EADkC,EAAjBvD,IAAOrC,MACTC,GACrB,OAAO8F,KAAK3D,SAAS,CAACjC,KAAMyF,EAAOzF,KAAMM,SAAUmF,EAAO/G,UAa/CmH,GAAU,SAAAT,GAAG,MAAK,CAC9BhE,YAAY,OAAD,OAASgE,EAAT,SACXnD,SAAU,gBAAEjC,EAAF,EAAEA,KAAF,SAAQM,WAA2BkE,GAAQE,MAAQ1E,GAAQoF,GACrEO,SAAU,YAAgC,IAAtB7F,EAAqB,EAArBA,GACb2F,EADkC,EAAjBvD,IAAOrC,MACTC,GACrB,OAAO8F,KAAK3D,SAAS,CAACjC,KAAMyF,EAAOzF,KAAMM,SAAUmF,EAAO/G,UCpD/CP,GAAa,SAAC,GAAD,IAAE2G,EAAF,EAAEA,MAAO7D,EAAT,EAASA,KAAMjB,EAAf,EAAeA,KAAMM,EAArB,EAAqBA,SAArB,MAAoC,CAC7D5B,KAAMjB,EAAWU,WACjB2G,QACA7D,OACAjB,OACAM,aCCKwF,GAAmB,SAAAzE,GAAI,OAAIX,KAAM,mBAAgBY,EAAhB,EAAEA,UAAuBD,KAAOA,EAAKM,eACtEhD,GAAQ,SAAAC,GAAI,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAC3D0G,GAAY5E,KAAaA,MAEzBqF,GAAcrI,OAAOC,OAAO,CACjC,UAAW,iBAAO,CACjB0E,MAAO,kBACPjB,YAAa,kEACbkB,MAAO,CAAC,GAAI,IACZX,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,gBAIpB,UAAW,iBAAO,CACjBmE,MAAO,iBACPjB,YAAa,mDACbkB,MAAO,CAAC,GAAI,IACZX,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACjBA,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,YACjBqE,EAASrE,EAAQ,aAGnB,UAAW,iBAAO,CACjBmE,MAAO,gBACPjB,YAAa,mEACbkB,MAAO,CAAC,GAAI,IACZX,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,YACjBqE,EAASrE,EAAQ,gBAIpB,UAAW,iBAAO,CACjBmE,MAAO,qBACPjB,YAAa,gEACbkB,MAAO,CAAC,IACRX,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,WACjBqE,EAASrE,EAAQ,kBAIpB,SAAU,iBAAO,CAChBmE,MAAO,yBACPjB,YAAa,iCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,eAIpB,SAAU,iBAAO,CAChBmE,MAAO,eACPjB,YAAa,uCACbkB,MAAO,CAAC,CACPX,aAAc,CAACkE,GAAQ,KACrB,CACFlE,aAAc,CAACkE,GAAQ,MAExBlE,aAAc,GACd7C,QAAQ,WAAD,4BAAE,WAAeyD,GAAf,SAAAU,EAAA,0DACLvC,MAAM,SAAAlC,GAAI,OAAIA,EAAKkD,eAAckE,KAAKtD,OADjC,uBAEP5B,IACCA,IAASkF,KAAKtD,OACd5B,IAAMA,KAAO,iBACbA,IAAS4E,IACT5E,MAAU,YAA6B,IAA3BZ,EAA0B,EAA1BA,GAA0B,IAAtBoC,IAAMnC,EAAgB,EAAhBA,GACf0F,EAD+B,EAAZ5F,MACJC,GACrByC,EAASpE,GAAW,CACnB2G,MAAO/E,EACPkB,KAAMnB,EACNE,KAAMU,KAAM,EAAG+E,EAAOzF,KAAO,GAC7BM,SAAUmF,EAAO/G,WAVpBgC,GAFO,SAgBD/B,GAAM,KAhBL,OAiBP4D,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,WAlBV,gDAAF,mDAAC,KAsBT,MAAS,iBAAO,CACfmE,MAAO,QACPjB,YAAa,wBACbkB,MAAO,CAAC,CACPX,aAAc,EFvEMqE,EEuEG,EFvEK,CAC9B5E,YAAY,OAAD,OAAS4E,EAAT,SACX/D,SAAU,gBAAEjC,EAAF,EAAEA,KAAF,SAAQM,WAA2BkE,GAAQE,MAAQ1E,GAAQgG,GACrEL,SAAU,YAAgC,IAAtB7F,EAAqB,EAArBA,GACb2F,EADkC,EAAjBvD,IAAOrC,MACTC,GACrB,OAAO8F,KAAK3D,SAAS,CAACjC,KAAMyF,EAAOzF,KAAMM,SAAUmF,EAAO/G,UAa5B,CAC/B0C,YAAa,QACba,SAAU,kBAAM,GAChB0D,SAAU,kBAAM,OEoDfhE,aAAc,GACd7C,QAAQ,WAAD,4BAAE,WAAeyD,EAAUI,GAAzB,0BAAAM,EAAA,oEACuB2C,KAAKtD,MAAM2D,WADlC,aAAAhD,EAAA,wCAAAA,EAAA,kFACGiD,EADH,KACc1H,EADd,KAEH2H,EAAS3H,EAAKkD,aAFX,qBAINyE,EAASzF,MAAO,SAAA9C,GAAI,OAAI8C,KAAM,SAAAsB,GAAC,OAAIA,EAAE2D,SAAS/H,KAAOY,EAAKmD,gBAAegB,IAJnE,uBAMLJ,EAAS1E,EAAe,CACvBS,OAAQ6H,EAAOjE,IAAInC,GACnBxB,OAAQ,EAAKwB,GACbvB,KAAM0H,EACNzH,OAAO,KAVH,SAYCE,GAAM,KAZP,OAeJwH,GACF5D,GDxHoBuC,ECwHDqB,EAAOjE,IAAInC,GDxHA,CAClCrB,KAAMjB,EAAWW,UACjB0G,WCsGU,iCDxGc,IAAAA,ICwGd,6RAAF,qDAAC,IF1Ea,IAAAkB,GE+FtB,QAAW,iBAAO,CACjB3D,MAAO,UACPjB,YAAa,uCACbkB,MAAO,CAAC,CACPX,aAAc,CAACkE,GAAQ,GFjFM,CAC/BzE,YAAa,QACba,SAAU,kBAAM,GAChB0D,SAAU,kBAAM,OEgFfhE,aAAc,GACd7C,QAAQ,WAAD,4BAAE,WAAeyD,EAAUI,GAAzB,0BAAAM,EAAA,oEACuB2C,KAAKtD,MAAM2D,WADlC,aAAAhD,EAAA,0CAAAA,EAAA,kFACGiD,EADH,KACc1H,EADd,KAEH2H,EAAS3H,EAAKkD,aAFX,qBAINyE,EAASzF,MAAO,SAAA9C,GAAI,OAAI8C,KAAM,SAAAsB,GAAC,OAAIA,EAAE2D,SAAS/H,KAAOY,EAAKmD,gBAAegB,IAJnE,uBAMLJ,EAAS1E,EAAe,CACvBS,OAAQ6H,EAAOjE,IAAInC,GACnBxB,OAAQ,EAAKwB,GACbvB,KAAM0H,EACNzH,OAAO,KAVH,SAYCE,GAAM,KAZP,WAeJwH,EAfI,wBAgBAV,EAASU,EAAOjE,IAAIrC,MAAMsG,EAAOrG,IACvCyC,EAASpE,GAAW,CACnB2G,MAAOqB,EAAOjE,IAAInC,GAClBkB,KAAMkF,EAAOrG,GACbE,KAAMU,KAAM,EAAG+E,EAAOzF,KAAO,GAC7BM,SAAUmF,EAAO/G,QArBZ,UAuBAC,GAAM,KAvBN,kUAAF,qDAAC,KA4BT,YAAa,iBAAO,CACnB0D,MAAO,4BACPjB,YAAa,6BACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cACjBqE,EAASrE,EAAQ,cAIpB,YAAa,iBAAO,CACnBmE,MAAO,4BACPjB,YAAa,6BACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cACjBqE,EAASrE,EAAQ,gBAIpB,YAAa,iBAAO,CACnBmE,MAAO,4BACPjB,YAAa,6BACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,oBACPjB,YAAa,mDACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,oBACPjB,YAAa,+BACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,qBACPjB,YAAa,0CACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,UACjBqE,EAASrE,EAAQ,uBAIpB,QAAS,iBAAO,CACfmE,MAAO,8BACPjB,YAAa,gEACbkB,MAAO,CAAC,CACPX,aAAc,CAACkE,GAAQ,KACrB,CACFlE,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,gBAIpB,iBAAkB,iBAAO,CACxBmE,MAAO,wBACPjB,YAAa,yBACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACjB,GAAGuD,GAAiBF,MAAM,CACzB,IAAMQ,EAAWR,KAAKtD,MAAM,GAAGZ,aAC/Ba,EAASpE,GAAW,CACnB2G,MAAOsB,EAASlE,IAAInC,GACpBkB,KAAMmF,EAAStG,GACfE,KAAM,EACNM,SAAUkE,GAAQC,YAKtB,UAAW,iBAAO,CACjBpC,MAAO,8BACPjB,YAAa,qCACbkB,MAAO,CAAC,CACPX,aAAc,CAACkE,GAAQ,KACrB,CACFlE,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,gBAIpB,UAAW,iBAAO,CACjBmE,MAAO,mBACPjB,YAAa,kCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,OACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAEjBqE,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,iBAIpB,UAAW,iBAAO,CACjBmE,MAAO,oBACPjB,YAAa,sBACbkB,MAAO,GACPX,aAAc,GACd7C,QAAS,SAASyD,GACjBA,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,YACjBqE,EDtU0B,CAC5B7D,KAAMjB,EAAWY,YCwUjB,WAAY,iBAAO,CAClBgE,MAAO,kBACPjB,YAAa,6DACbkB,MAAO,GACPX,aAAc,GACd7C,QAAS,SAASyD,GACjBA,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,eAGnB,UAAW,iBAAO,CACjBmE,MAAO,oBACPjB,YAAa,sCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,gBAIpB,UAAW,iBAAO,CACjBmE,MAAO,mCACPjB,YAAa,gCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACjB,GAAGuD,GAAiBF,MAAM,CACzBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,YACjB,IAAMkI,EAAWR,KAAKtD,MAAM,GAAGZ,aAC/Ba,EAASpE,GAAW,CACnB2G,MAAOsB,EAASlE,IAAInC,GACpBkB,KAAMmF,EAAStG,GACfE,KAAM,EACNM,SAAUkE,GAAQC,YAKtB,UAAW,iBAAO,CACjBpC,MAAO,iBACPjB,YAAa,qBACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACjB,GAAGuD,GAAiBF,MAAM,CACzBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,YACjB,IAAMkI,EAAWR,KAAKtD,MAAM,GAAGZ,aAC/Ba,EAASpE,GAAW,CACnB2G,MAAOsB,EAASlE,IAAInC,GACpBkB,KAAMmF,EAAStG,GACfE,KAAM,EACNM,SAAUkE,GAAQC,YAKtB,UAAW,iBAAO,CACjBpC,MAAO,sBACPjB,YAAa,sBACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAACwD,GAAa,IAC5BrG,QAAS,SAASyD,GACjB,GAAGuD,GAAiBF,MAAM,CACzB,IAAMQ,EAAWR,KAAKtD,MAAM,GAAGZ,aAC/Ba,EAASpE,GAAW,CACnB2G,MAAOsB,EAASlE,IAAInC,GACpBkB,KAAMmF,EAAStG,GACfE,KAAM,EACNM,SAAUkE,GAAQC,YAKtB,QAAS,iBAAO,CACfpC,MAAO,0BACPjB,YAAa,sCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,eACPjB,YAAa,qBACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,cACPjB,YAAa,oBACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,YACPjB,YAAa,gCACbkB,MAAO,CAAC,CACPX,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,KACrB,CACF/D,aAAc,CAAC+D,GAAQ,MAExB/D,aAAc,CAAC6D,GAAa,IAC5B1G,QAAS,SAASyD,GACduD,GAAiBF,QACnBrD,EAAStE,EAAW2H,KAAK7F,KACzBwC,EAASrE,EAAQ,cAIpB,QAAS,iBAAO,CACfmE,MAAO,+BACPjB,YAAa,mCACbkB,MAAO,GACPX,aAAc,GACd7C,QAAS,SAASyD,GACduD,GAAiBF,OACnBrD,EAASrE,EAAQ,aAIpB,QAAS,iBAAO,CACfmE,MAAO,uBACPjB,YAAa,8CACbkB,MAAO,GACPX,aAAc,GACd7C,QAAS,SAASyD,GACduD,GAAiBF,OACnBrD,EAASrE,EAAQ,eAMRmI,GAAa,SAACrH,GAC1B,OAAO,aACNe,GAAI6E,kBACJ5F,QACG+G,GAAY/G,OCthBXsH,GAAe,CACpBxD,WAAY7D,EAAarB,KACzB+E,SAAU,GACVE,MAAO,CAACwD,GAAW,aAGdzI,GAAO,SAACuF,EAAO+B,GACpB,OAAG/B,EAAML,aAAe7D,EAAarB,KAC7BuF,EAED,eACHA,EADJ,CAECL,WAAY7D,EAAaC,KACzByD,SAAUuC,EAAK/C,KAAI,SAAAD,GAAG,MAAK,CAC1BA,MACApC,GAAIyG,KAAKC,MAAoB,EAAdD,KAAKE,iBAUjBC,GAAkB,SAAApI,GAAM,OAAIoC,MAAS,SAACiG,EAAD,OAAOrE,EAAP,EAAOA,MAAP,OAAkBqE,GAJrC,SAAArI,GAAM,OAAIoC,IACjCA,IAAMA,KAAO,iBACbA,MAAO,SAAA9C,GAAI,OAAKA,GAAQA,EAAKsE,IAAInC,KAAOzB,MAE2BsI,CAAgBtI,EAAhBsI,CAAwBtE,UAAQuE,IAC9FC,GAAyB,SAAAxI,GAAM,OAAIoC,KAAS,qBAAEwB,IAAanC,KAAOzB,MAGlEyI,GAAa,SAACxI,EAAQ2F,GAAT,OAAgBC,GAAkB,qBAAEpE,KAAexB,IAAQ2F,IACxE8C,GAAsB,SAAA1I,GAAM,OAAI6F,GACrC,SAAA9C,GAAI,OAAIX,MAAM,SAAAlC,GAAI,OAAIA,EAAKkD,cAAgBlD,EAAKkD,aAAaQ,IAAInC,KAAOzB,IAAhEoC,CAAwEW,EAAKiB,SACrFgC,EAAiB,QAASH,GACzB,gBAAEzC,EAAF,EAAEA,aAAF,OAAoBA,GAAgBA,EAAaQ,IAAInC,KAAOzB,IAC5DgG,EAAiB,gBAAgB,mBAI7BzG,GAAiB,SAAC,GAAD,IAAES,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,MAAxB,OAAmC,SAAA0E,GACzD,IAAMvF,EAnBmB,SAAAU,GAAM,OAAIoC,MAAO,qBAAEwB,IAAanC,KAAOzB,KAmBnD2I,CAAkB3I,EAAlB2I,CAA0B9D,EAAMR,WACzC+D,GAAgBpI,EAAhBoI,CAAwBvD,EAAMN,OAE5BqE,EAdU,SAAA3I,GAAM,OAAImC,MAAO,qBAAEX,KAAexB,KAarC4I,CAAS5I,EAAT4I,CAAiBhE,EAAMN,OACXP,MAAM9D,GAAMkD,aACrC,OAAGwF,IAAgBtJ,GAASuF,EAAML,aAAe7D,EAAaC,OAAST,EAC/D0E,EAEDzC,KAAS,CACfiC,SAAUjC,IACToG,GAAuBxI,GACvBoC,MAAO,kBAAMwG,IAAaxG,IAASwG,KAEpCrE,MAAOnC,IACNsG,GAAoB1I,GACpByI,GAAWxI,EACV+F,EAAiB,QAAS5D,KAASlC,EAAM8F,EAAiB,gBAAgB,kBAAM1G,UAR5E8C,CAWJyC,KAGErF,GAAa,SAAAQ,GAAM,OAAI,SAAA6E,GAC5B,IAAMvF,EAAO8I,GAAgBpI,EAAhBoI,CAAwBvD,EAAMN,OAC3C,OAAIjF,GAAQuF,EAAML,aAAe7D,EAAaC,KAGvCwB,KAAS,CACfiC,SAAUjC,IAAS9C,GACnBiF,MAAOmE,GAAoB1I,IAFrBoC,CAGJyC,GALKA,IASHiE,GAAe1G,MADI,SAAAW,GAAI,OAAIX,KAAM,mBAAgBY,EAAhB,EAAEA,UAAuBD,KAAOA,EAAKM,iBAEtE2D,GAAY5E,KAAaA,MASzB2G,GAAsB3G,IAC3BA,KACC0G,GACA9C,EAAiB,QAChB5D,IAAM4D,EAAiB,gBAAgB,mBAKpCvG,GAA4B,SAAAoF,GACjC,OAAOzC,KAAS,CACfoC,WAAY,kBAAM7D,EAAaE,WAC/BwD,UApByBE,EAoBKM,EAAMN,MApBFnC,KAASA,IAC5CA,IAASmC,GACTnC,IAAS0G,IACT1G,IAAMA,KAAO,UACbA,KACAA,IAASA,KAAgB4E,GAAW,iBACpC5E,IAAMA,KAAO,iBAN+BA,KAqB3CmC,MAAOwE,IAHD3G,CAIJyC,GAtBuB,IAAAN,GAyBrB7E,GAAuB0C,KAAS,CACrCoC,WAAY,kBAAM7D,EAAarB,MAC/B+E,SAAU,iBAAM,IAChBE,MAAOnC,IAAM4D,EAAiB,QAC7B5D,IAAM4D,EAAiB,gBAAgB,oBAInCrG,GAAa,SAAAM,GAAM,OAAImC,KAAS,CACrCmC,MAAOnC,KAAS,SAAAW,GAAI,OAAIA,EAAKtB,KAAOxB,QAG/BL,GAAU,SAAAc,GAAI,OAAI0B,KAAS,CAChCmC,MAAOnC,IAAS2F,GAAWrH,OAGtBb,GAAa,SAAC,GAAD,IAAE2G,EAAF,EAAEA,MAAO7D,EAAT,EAASA,KAAMjB,EAAf,EAAeA,KAAMM,EAArB,EAAqBA,SAArB,OAAmCI,KAAS,CAC9DmC,MAAOnC,IAAM4D,EAAiB,QAC7BH,GACC,SAAA3F,GAAI,OAAIA,EAAKkD,cAAgBlD,EAAKkD,aAAaQ,IAAInC,KAAO+E,IAC1DR,EAAiB,eAChBA,EAAiB,MAChBA,EAAiB,QAChB5D,IAASO,EAAM,CACdjB,OACAtB,KAAM4B,aCvHPgH,GAAQC,EAAW,CACxB3D,aRQ+BN,ESjBI,CACnC4B,KAAMH,GACN5B,MFsIoB,WAAkC,IAAjC6B,EAAgC,uDAApB,GAAIC,EAAgB,uDAAP,GAAO,EACdD,EAA/B7B,aAD6C,MACrCmD,GADqC,EACvBpB,EAASF,EAATE,KACtBxG,EAAyEuG,EAAzEvG,KAAMJ,EAAmE2G,EAAnE3G,OAAQC,EAA2D0G,EAA3D1G,OAAQC,EAAmDyG,EAAnDzG,KAAMQ,EAA6CiG,EAA7CjG,KAAMP,EAAuCwG,EAAvCxG,MAAOqG,EAAgCG,EAAhCH,MAAO7D,EAAyBgE,EAAzBhE,KAAMjB,EAAmBiF,EAAnBjF,KAAMM,EAAa2E,EAAb3E,SACpE,OAAO5B,GACP,KAAKjB,EAAWG,KACf,OAAOA,GAAKuF,EAAO+B,GACpB,KAAKzH,EAAWI,eACf,OAAOA,GAAe,CAACS,SAAQC,SAAQC,OAAMC,SAAtCZ,CAA8CsF,GACtD,KAAK1F,EAAWK,WACf,OAAOA,GAAWQ,EAAXR,CAAmBqF,GAC3B,KAAK1F,EAAWM,0BACf,OAAOA,GAA0BoF,GAClC,KAAK1F,EAAWO,qBACf,OAAOA,GAAqBmF,GAC7B,KAAK1F,EAAWQ,WACf,OAAOA,GAAWM,EAAXN,CAAmBkF,GAC3B,KAAK1F,EAAWS,QACf,OAAOA,GAAQc,EAARd,CAAciF,GACtB,KAAK1F,EAAWU,WACf,OAAOA,GAAW,CAAC2G,QAAO7D,OAAMjB,OAAMM,YAA/BnC,CAA0CgF,GAClD,QACC,OAAOA,KP5IoC,SAACqE,EAAOvC,GACpD,OAAOvE,IACNA,KAAM,SAAA+G,GAAO,OAAIA,EAAQD,EAAOvC,MAChCnB,EAAe0D,GAFT9G,CAGL4C,KQXFO,oBAAgBgD,IAGjBa,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACC,EAAA,EAAD,CAAaC,QAASC,KACrB,kBAAC,IAAD,CAAUT,MAAOA,IAChB,kBAAC,EAAD,SAIHU,SAASC,eAAe,SnB2GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ceec8248.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionType = Object.freeze({\r\n\troll: 'ROLL',\r\n\tmoveRollToSlot: 'MOVE_ROLL_TO_SLOT',\r\n\treturnRoll: 'RETURN_ROLL',\r\n\tremoveRollFromFailedCards: 'REMOVE_ROLL_FROM_FAILED_CARDS',\r\n\tcollectAllDiceToRoll: 'COLLECT_ALL_DICE_TO_ROLL',\r\n\r\n\tremoveCard: 'REMOVE_CARD',\r\n\taddCard: 'ADD_CARD',\r\n\r\n\tupdatePips: 'UPDATE_PIPS',\r\n\tremovePop: 'REMOVE_POP',\r\n\taddPop: 'ADD_POP',\r\n})\r\n","import { ActionType } from '../types/actions'\r\n\r\nexport const roll = () => ({\r\n\ttype: ActionType.roll,\r\n})\r\n\r\nexport const moveRollToSlot = ({diceId, cardId, slot, force=false}) => ({\r\n\ttype: ActionType.moveRollToSlot,\r\n\tdiceId,\r\n\tcardId,\r\n\tslot,\r\n\tforce,\r\n})\r\n\r\nexport const returnRoll = diceId => ({\r\n\ttype: ActionType.returnRoll,\r\n\tdiceId,\r\n})\r\n\r\nconst delay = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nconst removeRollFromFailedCards = () => ({\r\n\ttype: ActionType.removeRollFromFailedCards,\r\n})\r\n\r\nconst collectAllDiceToRoll = () => ({\r\n\ttype: ActionType.collectAllDiceToRoll,\r\n})\r\n\r\nexport const done = () => async (dispatch, getState) => {\r\n\tconst waitTime = 500\r\n\tdispatch(removeRollFromFailedCards())\r\n\tawait delay(waitTime)\r\n\tconst { cards, freePops } = getState().board\r\n\tfor(const card of cards){\r\n\t\tawait card.resolve(dispatch, freePops)\r\n\t\tawait delay(waitTime)\r\n\t}\r\n\tdispatch(collectAllDiceToRoll())\r\n}\r\n\r\nexport const removeCard = cardId => ({\r\n\ttype: ActionType.removeCard,\r\n\tcardId,\r\n})\r\n\r\nexport const addCard = name => ({\r\n\ttype: ActionType.addCard,\r\n\tname,\r\n})\r\n","export const BoardActions = Object.freeze({\r\n\troll: 'ROLL',\r\n\tdone: 'DONE',\r\n\tresolving: 'resolving',\r\n})\r\n","export const DragItemType = Object.freeze({\r\n\tdice: 'DICE',\r\n})\r\n","import React, { useState } from 'react'\r\nimport * as R from 'ramda'\r\nimport { useDrag } from 'react-dnd'\r\nimport './Dice.css'\r\n\r\nimport { DragItemType } from '../types/dnd'\r\n\r\nconst Pip = ({pos, of, type}) => {\r\n\tconst classes = [\r\n\t\t'pip',\r\n\t\t`pip${pos}of${of}`,\r\n\t\t`pip-${type}`,\r\n\t].join(' ')\r\n\treturn <div className={classes}></div>\r\n}\r\n\r\nconst Dice = ({faces, up, id}) => {\r\n\tconst {pips, type} = faces[up]\r\n\tconst [open, setOpen] = useState(false)\r\n\tconst toggleOpen = () => setOpen(!open)\r\n\r\n\tconst [, drag] = useDrag({\r\n\t\titem: {\r\n\t\t\ttype: DragItemType.dice,\r\n\t\t\tid,\r\n\t\t\tup,\r\n\t\t\tpips,\r\n\t\t\tpipsType: type,\r\n\t\t},\r\n\t\tbegin: () => {\r\n\t\t\tsetOpen(false)\r\n\t\t},\r\n\t})\r\n\r\n\tconst renderPips = (pips, type) => R.pipe(\r\n\t\tR.always(R.range(1, pips + 1)),\r\n\t\tR.map(pos => <Pip type={type} pos={pos} of={pips} key={pos} />),\r\n\t)()\r\n\r\n\tconst mapIndexed = R.addIndex(R.map)\r\n\tconst renderOtherFaces = () => {\r\n\t\treturn R.pipe(\r\n\t\t\tR.always(R.range(0, 6)),\r\n\t\t\tR.filter(x => x !== up),\r\n\t\t\tR.insert(2, up),\r\n\t\t\tR.map(i => faces[i]),\r\n\t\t\tmapIndexed((face, index) => <div className={`dice dice-ghost dice-ghost${index}`} key={index}>\r\n\t\t\t\t{face && renderPips(face.pips, face.type)}\r\n\t\t\t</div>),\r\n\t\t)()\r\n\t}\r\n\r\n\treturn <div\r\n\t\tclassName={`dice ${open ? 'dice-open' : ''}`}\r\n\t\tonClick={toggleOpen}\r\n\t\tref={drag}\r\n\t>\r\n\t\t{renderPips(pips, type)}\r\n\r\n\t\t{open && renderOtherFaces()}\r\n\t</div>\r\n}\r\n\r\nexport default Dice\r\n","import React from 'react'\r\nimport './Requirement.css'\r\n\r\nconst Requirement = ({description, card, testCard}) => {\r\n\tconst classes = [\r\n\t\t'requirement',\r\n\t]\r\n\tif(testCard && card){\r\n\t\tclasses.push(testCard(card) ? 'requirement-fullfilled' : 'requirement-failed')\r\n\t}\r\n\treturn <p className={classes.join(' ')}>{description}</p>\r\n}\r\n\r\nexport default Requirement\r\n","import React from 'react'\r\nimport { useDrop } from 'react-dnd'\r\nimport * as R from 'ramda'\r\n\r\nimport { DragItemType } from '../types/dnd'\r\nimport Dice from './Dice'\r\nimport Requirement from './Requirement'\r\n\r\nconst Slot = (slot) => {\r\n\tconst {onDrop, selectedRoll, requirements} = slot\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: DragItemType.dice,\r\n\t\tdrop: onDrop,\r\n\t\tcanDrop: item => {\r\n\t\t\tif(requirements){\r\n\t\t\t\treturn R.all(r => r.testItem(item), requirements)\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t},\r\n\t})\r\n\treturn <div\r\n\t\tclassName=\"slot\"\r\n\t\tref={drop}\r\n\t>\r\n\t\t{selectedRoll && <Dice up={selectedRoll.up} faces={selectedRoll.pop.faces} id={selectedRoll.pop.id} />}\r\n\t\t{!selectedRoll && requirements && <div className=\"requirements\">\r\n\t\t\t{requirements.map((r, i) => <Requirement {...r} key={i} />)}\r\n\t\t</div>\r\n\t\t}\r\n\t</div>\r\n}\r\n\r\nexport default Slot\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport './Card.css'\r\n\r\nimport Slot from './Slot'\r\nimport Requirement from './Requirement'\r\nimport { moveRollToSlot } from '../actions/boardActions'\r\n\r\nconst Card = (card) => {\r\n\tconst {title, description, slots, id, requirements} = card\r\n\tconst dispatch = useDispatch()\r\n\tconst onDrop = slot => item => dispatch(moveRollToSlot({\r\n\t\tdiceId: item.id,\r\n\t\tcardId: id,\r\n\t\tslot,\r\n\t}))\r\n\treturn <div className=\"card\">\r\n\t\t<h2>{title}</h2>\r\n\t\t<p>{description}</p>\r\n\t\t<div className=\"requirements\">\r\n\t\t\t{requirements.map((r, i) => <Requirement {...r} card={card} key={i} />)}\r\n\t\t</div>\r\n\t\t<div className=\"slots\">\r\n\t\t\t{slots.map((s, i) => <Slot {...s} onDrop={onDrop(i)} key={i} />)}\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport * as R from 'ramda'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useDrop } from 'react-dnd'\r\nimport './Board.css'\r\n\r\nimport { roll, done, returnRoll } from '../actions/boardActions'\r\nimport { BoardActions } from '../types/board'\r\nimport { DragItemType } from '../types/dnd'\r\nimport Dice from './Dice'\r\nimport Card from './Card'\r\n\r\nconst Board = () => {\r\n\tconst freePops = useSelector(R.path(['board', 'freePops']))\r\n\tconst cards = useSelector(R.path(['board', 'cards']))\r\n\tconst nextAction = useSelector(R.path(['board', 'nextAction']))\r\n\tconst dispatch = useDispatch()\r\n\tconst dispatchRoll = () => dispatch(roll())\r\n\tconst dispatchDone = () => dispatch(done())\r\n\tconst onReturn = item => dispatch(returnRoll(item.id))\r\n\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: DragItemType.dice,\r\n\t\tdrop: onReturn,\r\n\t})\r\n\r\n\treturn <main className=\"board\">\r\n\t\t<div className=\"cards\">\r\n\t\t\t{cards && cards.map(c => <Card {...c} key={c.id} />)}\r\n\t\t</div>\r\n\t\t{nextAction === BoardActions.roll && <button onClick={dispatchRoll}>Roll</button>}\r\n\t\t{nextAction === BoardActions.done && <button onClick={dispatchDone}>Done</button>}\r\n\t\t{nextAction === BoardActions.resolving && <button disabled>resolving</button>}\r\n\t\t<div\r\n\t\t\tclassName=\"free-pops\"\r\n\t\t\tref={drop}\r\n\t\t>\r\n\t\t\t{freePops && freePops.map(({up, pop: {faces, id}}) => <Dice up={up} faces={faces} id={id} key={id} />)}\r\n\t\t</div>\r\n\t</main>\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\nimport './App.css'\n\nimport Board from './components/Board'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>Dice Town</h1>\n\t\t\t</header>\n\t\t\t<Board />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import * as R from 'ramda'\r\n\r\nexport const keepRefIfEqual = defaultValue => value =>\r\n\tR.equals(value, defaultValue) ? defaultValue : value\r\n\r\nexport const keepRefIfNoChange = fn => x => R.pipe(fn, keepRefIfEqual(x))(x)\r\n\r\nexport const adjustOnCondition = (condition, updater) => keepRefIfNoChange(\r\n\tR.map(x => {\r\n\t\tif(condition(x)){\r\n\t\t\treturn updater(x)\r\n\t\t}\r\n\t\treturn x\r\n\t}),\r\n)\r\n\r\nexport const adjustObjectProp = (key, updater) => keepRefIfNoChange(object => ({\r\n\t...object,\r\n\t[key]: updater(object[key]),\r\n}))\r\n\r\nexport const combineReducers = (reducers) => (state, action) => {\r\n\treturn R.pipe(\r\n\t\tR.map(reducer => reducer(state, action)),\r\n\t\tkeepRefIfEqual(state),\r\n\t)(reducers)\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\r\n\r\nexport const buildStoreFactory = ({\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}) => ({\r\n\trootReducer,\r\n\tpreloadedState,\r\n}) => createStore(\r\n\trootReducer,\r\n\tpreloadedState,\r\n\tcomposeWithDevTools({})(applyMiddleware(thunk)),\r\n)\r\n\r\nexport const injectedDependencies = {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}\r\n\r\nexport default buildStoreFactory(injectedDependencies)\r\n","export const PipType = Object.freeze({\r\n\twork: 'work',\r\n\tlife: 'life',\r\n})\r\n","import * as R from 'ramda'\r\nimport { uuid } from 'uuidv4'\r\n\r\nimport { PipType } from '../types/pips'\r\nimport { ActionType } from '../types/actions'\r\nimport { adjustOnCondition, adjustObjectProp } from './util'\r\n\r\nconst createStartingPop = () => {\r\n\treturn {\r\n\t\tid: uuid(),\r\n\t\tfaces: [\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 1, type: PipType.work},\r\n\t\t\t{pips: 6, type: PipType.life},\r\n\t\t],\r\n\t}\r\n}\r\n\r\nconst createChild = () => {\r\n\treturn {\r\n\t\tid: uuid(),\r\n\t\tfaces: [\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 0, type: PipType.work},\r\n\t\t\t{pips: 6, type: PipType.life},\r\n\t\t],\r\n\t}\r\n}\r\n\r\nconst initialPops = [\r\n\tcreateStartingPop(),\r\n\tcreateStartingPop(),\r\n\tcreateStartingPop(),\r\n]\r\n\r\nconst updatePips = ({popId, face, pips, pipsType}) => adjustOnCondition(\r\n\tpop => pop.id === popId,\r\n\tadjustObjectProp('faces',\r\n\t\tR.update(face, {\r\n\t\t\tpips,\r\n\t\t\ttype: pipsType,\r\n\t\t}),\r\n\t),\r\n)\r\n\r\nconst removePop = popId => R.filter(pop => pop.id !== popId)\r\n\r\nconst addPop = () => R.append(createChild())\r\n\r\nconst popsReducer = (rootState = {}, action = {}) => {\r\n\tconst { pops = initialPops } = rootState\r\n\tconst { type, popId, face, pips, pipsType } = action\r\n\tswitch(type){\r\n\tcase ActionType.updatePips:\r\n\t\treturn updatePips({popId, face, pips, pipsType})(pops)\r\n\tcase ActionType.removePop:\r\n\t\treturn removePop(popId)(pops)\r\n\tcase ActionType.addPop:\r\n\t\treturn addPop()(pops)\r\n\tdefault:\r\n\t\treturn pops\r\n\t}\r\n}\r\n\r\nexport default popsReducer\r\n","import * as R from 'ramda'\r\n\r\nimport { PipType } from '../types/pips'\r\n\r\nexport const minDiceCount = min => ({\r\n\tdescription: `min ${min} dice`,\r\n\ttestCard: R.pipe(\r\n\t\tR.prop('slots'),\r\n\t\tR.map(slot => slot.selectedRoll ? 1 : 0),\r\n\t\tR.sum,\r\n\t\tdiceCount => diceCount >= min,\r\n\t),\r\n})\r\n\r\nconst isNotNill = R.complement(R.isNil)\r\nconst getUpsideFace = roll => roll.pop.faces[roll.up]\r\n\r\nexport const minWorkCount = min => ({\r\n\tdescription: `min ${min} work`,\r\n\ttestCard: R.pipe(\r\n\t\tR.prop('slots'),\r\n\t\tR.filter(R.propSatisfies(isNotNill, 'selectedRoll')),\r\n\t\tR.map(slot => slot.selectedRoll),\r\n\t\tR.map(getUpsideFace),\r\n\t\tR.filter(upside => upside.type === PipType.work),\r\n\t\tR.map(upside => upside.pips),\r\n\t\tR.sum,\r\n\t\tdiceCount => diceCount >= min,\r\n\t),\r\n})\r\n\r\nexport const minWork = min => ({\r\n\tdescription: `min ${min} work`,\r\n\ttestItem: ({pips, pipsType}) => pipsType === PipType.work && pips >= min,\r\n\ttestRoll: function({up, pop: { faces }}) {\r\n\t\tconst upside = faces[up]\r\n\t\treturn this.testItem({pips: upside.pips, pipsType: upside.type})\r\n\t},\r\n})\r\n\r\nexport const maxLife = max => ({\r\n\tdescription: `max ${max} life`,\r\n\ttestItem: ({pips, pipsType}) => pipsType === PipType.life && pips <= max,\r\n\ttestRoll: function({up, pop: { faces }}) {\r\n\t\tconst upside = faces[up]\r\n\t\treturn this.testItem({pips: upside.pips, pipsType: upside.type})\r\n\t},\r\n})\r\n\r\nexport const minLife = min => ({\r\n\tdescription: `min ${min} life`,\r\n\ttestItem: ({pips, pipsType}) => pipsType === PipType.life && pips >= min,\r\n\ttestRoll: function({up, pop: { faces }}) {\r\n\t\tconst upside = faces[up]\r\n\t\treturn this.testItem({pips: upside.pips, pipsType: upside.type})\r\n\t},\r\n})\r\n\r\nexport const pullsText = () => ({\r\n\tdescription: 'pulls',\r\n\ttestItem: () => true,\r\n\ttestRoll: () => true,\r\n})\r\n","import { ActionType } from '../types/actions'\r\n\r\nexport const updatePips = ({popId, face, pips, pipsType}) => ({\r\n\ttype: ActionType.updatePips,\r\n\tpopId,\r\n\tface,\r\n\tpips,\r\n\tpipsType,\r\n})\r\n\r\nexport const removePop = popId => ({\r\n\ttype: ActionType.removePop,\r\n\tpopId,\r\n})\r\n\r\nexport const addPop = () => ({\r\n\ttype: ActionType.addPop,\r\n})\r\n","import * as R from 'ramda'\r\nimport { uuid } from 'uuidv4'\r\n\r\nimport { minDiceCount, minWorkCount, minWork, maxLife, minLife, pullsText } from './requirements'\r\nimport { removeCard, addCard, moveRollToSlot } from '../actions/boardActions'\r\nimport { updatePips, removePop, addPop } from '../actions/popActions'\r\nimport { PipType } from '../types/pips'\r\n\r\nconst isCardFullfilled = card => R.all(({testCard}) => testCard(card), card.requirements)\r\nconst delay = time => new Promise(resolve => setTimeout(resolve, time))\r\nconst isNotNill = R.complement(R.isNil)\r\n\r\nconst cardStories = Object.freeze({\r\n\t'intro 1': () => ({\r\n\t\ttitle: 'Place a citizen',\r\n\t\tdescription: 'The dice are your citizens and you can place them after rolling',\r\n\t\tslots: [{}, {}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('intro 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'intro 2': () => ({\r\n\t\ttitle: 'To many needed',\r\n\t\tdescription: 'Sometimes you can not meet the cards requirement',\r\n\t\tslots: [{}, {}],\r\n\t\trequirements: [minWorkCount(3)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tdispatch(removeCard(this.id))\r\n\t\t\tdispatch(addCard('intro 3'))\r\n\t\t\tdispatch(addCard('death'))\r\n\t\t},\r\n\t}),\r\n\t'intro 3': () => ({\r\n\t\ttitle: 'Life is harsh',\r\n\t\tdescription: 'Death is waiting, maybe we can think of a way to \"keep it alive\"',\r\n\t\tslots: [{}, {}],\r\n\t\trequirements: [minWorkCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('intro 4'))\r\n\t\t\t\tdispatch(addCard('illness'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'intro 4': () => ({\r\n\t\ttitle: 'Life is even worse',\r\n\t\tdescription: 'illness will bring us closer to death, let\\'s search some wood',\r\n\t\tslots: [{}],\r\n\t\trequirements: [minWorkCount(0)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('fire 2'))\r\n\t\t\t\tdispatch(addCard('explore 1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'fire 1': () => ({\r\n\t\ttitle: 'Gather wood for a fire',\r\n\t\tdescription: 'a fire will keep the cold away',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('fire 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'fire 2': () => ({\r\n\t\ttitle: 'Rest at fire',\r\n\t\tdescription: 'not as taxing as sitting in the cold',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minLife(2)],\r\n\t\t}, {\r\n\t\t\trequirements: [minLife(2)],\r\n\t\t}],\r\n\t\trequirements: [],\r\n\t\tresolve: async function(dispatch) {\r\n\t\t\tif(R.any(slot => slot.selectedRoll, this.slots)){\r\n\t\t\t\tR.pipe(\r\n\t\t\t\t\tR.always(this.slots),\r\n\t\t\t\t\tR.map(R.prop('selectedRoll')),\r\n\t\t\t\t\tR.filter(isNotNill),\r\n\t\t\t\t\tR.forEach(({up, pop: {id, faces}}) => {\r\n\t\t\t\t\t\tconst upside = faces[up]\r\n\t\t\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\t\t\tpopId: id,\r\n\t\t\t\t\t\t\tface: up,\r\n\t\t\t\t\t\t\tpips: R.max(1, upside.pips - 1),\r\n\t\t\t\t\t\t\tpipsType: upside.type,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t}),\r\n\t\t\t\t)()\r\n\t\t\t\tawait delay(1000)\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('fire 1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'death': () => ({\r\n\t\ttitle: 'Death',\r\n\t\tdescription: 'Life is just that way',\r\n\t\tslots: [{\r\n\t\t\trequirements: [maxLife(1), pullsText()],\r\n\t\t}],\r\n\t\trequirements: [],\r\n\t\tresolve: async function(dispatch, freePops) {\r\n\t\t\tfor(const [slotIndex, slot] of this.slots.entries()){\r\n\t\t\t\tlet victim = slot.selectedRoll\r\n\t\t\t\tif(!victim) {\r\n\t\t\t\t\tvictim = R.find(roll => R.all(r => r.testRoll(roll), slot.requirements), freePops)\r\n\t\t\t\t\tif(victim){\r\n\t\t\t\t\t\tdispatch(moveRollToSlot({\r\n\t\t\t\t\t\t\tdiceId: victim.pop.id,\r\n\t\t\t\t\t\t\tcardId: this.id,\r\n\t\t\t\t\t\t\tslot: slotIndex,\r\n\t\t\t\t\t\t\tforce: true,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\tawait delay(1000)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(victim){\r\n\t\t\t\t\tdispatch(removePop(victim.pop.id))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'illness': () => ({\r\n\t\ttitle: 'Illness',\r\n\t\tdescription: 'I should really find a place to rest',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minLife(2), pullsText()],\r\n\t\t}],\r\n\t\trequirements: [],\r\n\t\tresolve: async function(dispatch, freePops) {\r\n\t\t\tfor(const [slotIndex, slot] of this.slots.entries()){\r\n\t\t\t\tlet victim = slot.selectedRoll\r\n\t\t\t\tif(!victim) {\r\n\t\t\t\t\tvictim = R.find(roll => R.all(r => r.testRoll(roll), slot.requirements), freePops)\r\n\t\t\t\t\tif(victim){\r\n\t\t\t\t\t\tdispatch(moveRollToSlot({\r\n\t\t\t\t\t\t\tdiceId: victim.pop.id,\r\n\t\t\t\t\t\t\tcardId: this.id,\r\n\t\t\t\t\t\t\tslot: slotIndex,\r\n\t\t\t\t\t\t\tforce: true,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\tawait delay(1000)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(victim){\r\n\t\t\t\t\tconst upside = victim.pop.faces[victim.up]\r\n\t\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\t\tpopId: victim.pop.id,\r\n\t\t\t\t\t\tface: victim.up,\r\n\t\t\t\t\t\tpips: R.max(1, upside.pips - 2),\r\n\t\t\t\t\t\tpipsType: upside.type,\r\n\t\t\t\t\t}))\r\n\t\t\t\t\tawait delay(1000)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'explore 1': () => ({\r\n\t\ttitle: 'Explore your Surroundings',\r\n\t\tdescription: 'let\\'s see what we can find',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('explore 2'))\r\n\t\t\t\tdispatch(addCard('hut 1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'explore 2': () => ({\r\n\t\ttitle: 'Explore your Surroundings',\r\n\t\tdescription: 'let\\'s see what we can find',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('explore 3'))\r\n\t\t\t\tdispatch(addCard('tools 1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'explore 3': () => ({\r\n\t\ttitle: 'Explore your Surroundings',\r\n\t\tdescription: 'let\\'s see what we can find',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('end 1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'hut 1': () => ({\r\n\t\ttitle: 'We found a meadow',\r\n\t\tdescription: 'if we gather some wood we could build a hut here',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('hut 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'hut 2': () => ({\r\n\t\ttitle: 'We need more Logs',\r\n\t\tdescription: 'we need some of the big logs',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('hut 3'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'hut 3': () => ({\r\n\t\ttitle: 'Just the roof left',\r\n\t\tdescription: 'let\\'s search something to seal the roof',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('hut 4'))\r\n\t\t\t\tdispatch(addCard('basic teaching'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'hut 4': () => ({\r\n\t\ttitle: 'Maybe time to grow the Town',\r\n\t\tdescription: 'now that we have finished th hut we could think about a child',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minLife(3)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('child 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'basic teaching': () => ({\r\n\t\ttitle: 'Teaching basic skills',\r\n\t\tdescription: 'everybody starts small',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tconst selected = this.slots[1].selectedRoll\r\n\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\tpopId: selected.pop.id,\r\n\t\t\t\t\tface: selected.up,\r\n\t\t\t\t\tpips: 1,\r\n\t\t\t\t\tpipsType: PipType.work,\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'child 1': () => ({\r\n\t\ttitle: 'Maybe time to grow the Town',\r\n\t\tdescription: 'we could think about a child again',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minLife(3)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('child 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'child 2': () => ({\r\n\t\ttitle: 'A child was born',\r\n\t\tdescription: 'but it needs to be looked after',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('child 3'))\r\n\t\t\t} else {\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('child -1'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'child 3': () => ({\r\n\t\ttitle: 'A child has grown',\r\n\t\tdescription: 'and can help us now',\r\n\t\tslots: [],\r\n\t\trequirements: [],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tdispatch(removeCard(this.id))\r\n\t\t\tdispatch(addCard('child 1'))\r\n\t\t\tdispatch(addPop())\r\n\t\t},\r\n\t}),\r\n\t'child -1': () => ({\r\n\t\ttitle: 'How could\\'d you',\r\n\t\tdescription: 'you do know that children need to be looked after. do you?',\r\n\t\tslots: [],\r\n\t\trequirements: [],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tdispatch(removeCard(this.id))\r\n\t\t\tdispatch(addCard('child 1'))\r\n\t\t},\r\n\t}),\r\n\t'tools 1': () => ({\r\n\t\ttitle: 'Found some stones',\r\n\t\tdescription: 'maybe we could make tools with them',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('tools 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'tools 2': () => ({\r\n\t\ttitle: 'Still trying to make those tools',\r\n\t\tdescription: 'maybe a stick here would help',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(1)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('tools 3'))\r\n\t\t\t\tconst selected = this.slots[0].selectedRoll\r\n\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\tpopId: selected.pop.id,\r\n\t\t\t\t\tface: selected.up,\r\n\t\t\t\t\tpips: 2,\r\n\t\t\t\t\tpipsType: PipType.work,\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'tools 3': () => ({\r\n\t\ttitle: 'The tools work',\r\n\t\tdescription: 'i can show you how',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('tools 4'))\r\n\t\t\t\tconst selected = this.slots[1].selectedRoll\r\n\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\tpopId: selected.pop.id,\r\n\t\t\t\t\tface: selected.up,\r\n\t\t\t\t\tpips: 2,\r\n\t\t\t\t\tpipsType: PipType.work,\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'tools 4': () => ({\r\n\t\ttitle: 'Teaching toolmaking',\r\n\t\tdescription: 'it is not that hard',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(2)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(1)],\r\n\t\t}],\r\n\t\trequirements: [minDiceCount(2)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tconst selected = this.slots[1].selectedRoll\r\n\t\t\t\tdispatch(updatePips({\r\n\t\t\t\t\tpopId: selected.pop.id,\r\n\t\t\t\t\tface: selected.up,\r\n\t\t\t\t\tpips: 2,\r\n\t\t\t\t\tpipsType: PipType.work,\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 1': () => ({\r\n\t\ttitle: 'We found somthing shine',\r\n\t\tdescription: 'we have to dig to see how big it is',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minWorkCount(4)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('end 2'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 2': () => ({\r\n\t\ttitle: 'What is this',\r\n\t\tdescription: 'can we get it open',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minWorkCount(5)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('end 3'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 3': () => ({\r\n\t\ttitle: 'It is alive',\r\n\t\tdescription: 'can we talk to it',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minWorkCount(6)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('end 4'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 4': () => ({\r\n\t\ttitle: 'It speaks',\r\n\t\tdescription: 'can we convince it to help us',\r\n\t\tslots: [{\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}, {\r\n\t\t\trequirements: [minWork(0)],\r\n\t\t}],\r\n\t\trequirements: [minWorkCount(7)],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(removeCard(this.id))\r\n\t\t\t\tdispatch(addCard('end 5'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 5': () => ({\r\n\t\ttitle: 'It will take us to the stars',\r\n\t\tdescription: 'you have won, thanks for playing',\r\n\t\tslots: [],\r\n\t\trequirements: [],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(addCard('end 6'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n\t'end 6': () => ({\r\n\t\ttitle: 'Sorry it is so short',\r\n\t\tdescription: 'but I\\'m out of time, hope there are no bugs',\r\n\t\tslots: [],\r\n\t\trequirements: [],\r\n\t\tresolve: function(dispatch) {\r\n\t\t\tif(isCardFullfilled(this)){\r\n\t\t\t\tdispatch(addCard('end 6'))\r\n\t\t\t}\r\n\t\t},\r\n\t}),\r\n})\r\n\r\nexport const createCard = (name) => {\r\n\treturn {\r\n\t\tid: uuid(),\r\n\t\tname,\r\n\t\t...cardStories[name](),\r\n\t}\r\n}\r\n","import * as R from 'ramda'\r\n\r\nimport { ActionType } from '../types/actions'\r\nimport { BoardActions } from '../types/board'\r\nimport { adjustOnCondition, adjustObjectProp } from './util'\r\nimport { createCard } from '../content/cardStories'\r\n\r\nconst initialBoard = {\r\n\tnextAction: BoardActions.roll,\r\n\tfreePops: [],\r\n\tcards: [createCard('intro 1')],\r\n}\r\n\r\nconst roll = (board, pops) => {\r\n\tif(board.nextAction !== BoardActions.roll){\r\n\t\treturn board\r\n\t}\r\n\treturn {\r\n\t\t...board,\r\n\t\tnextAction: BoardActions.done,\r\n\t\tfreePops: pops.map(pop => ({\r\n\t\t\tpop,\r\n\t\t\tup: Math.floor(Math.random()*6),\r\n\t\t})),\r\n\t}\r\n}\r\n\r\nconst findRollInFreePop = diceId => R.find(({pop}) => pop.id === diceId)\r\nconst findRollInSlots = diceId => R.pipe(\r\n\tR.map(R.prop('selectedRoll')),\r\n\tR.find(roll => (roll && roll.pop.id === diceId)),\r\n)\r\nconst findRollInCards = diceId => R.reduce((acc, {slots}) => acc || findRollInSlots(diceId)(slots), undefined)\r\nconst removeRollFromFreePops = diceId => R.filter(({pop}) => pop.id !== diceId)\r\n\r\nconst findCard = cardId => R.find(({id}) => id === cardId)\r\nconst adjustCard = (cardId, fn) => adjustOnCondition(({id}) => id === cardId, fn)\r\nconst removeRollFromCards = diceId => adjustOnCondition(\r\n\tcard => R.any(slot => slot.selectedRoll && slot.selectedRoll.pop.id === diceId)(card.slots),\r\n\tadjustObjectProp('slots', adjustOnCondition(\r\n\t\t({selectedRoll}) => selectedRoll && selectedRoll.pop.id === diceId,\r\n\t\tadjustObjectProp('selectedRoll', () => undefined),\r\n\t)),\r\n)\r\n\r\nconst moveRollToSlot = ({diceId, cardId, slot, force}) => board => {\r\n\tconst roll = findRollInFreePop(diceId)(board.freePops)\r\n\t\t|| findRollInCards(diceId)(board.cards)\r\n\tconst card = findCard(cardId)(board.cards)\r\n\tconst previusRoll = card.slots[slot].selectedRoll\r\n\tif(previusRoll === roll || (board.nextAction !== BoardActions.done && !force)){\r\n\t\treturn board\r\n\t}\r\n\treturn R.evolve({\r\n\t\tfreePops: R.pipe(\r\n\t\t\tremoveRollFromFreePops(diceId),\r\n\t\t\tR.when(() => previusRoll, R.append(previusRoll)),\r\n\t\t),\r\n\t\tcards: R.pipe(\r\n\t\t\tremoveRollFromCards(diceId),\r\n\t\t\tadjustCard(cardId,\r\n\t\t\t\tadjustObjectProp('slots', R.adjust(slot, adjustObjectProp('selectedRoll', () => roll))),\r\n\t\t\t),\r\n\t\t),\r\n\t})(board)\r\n}\r\n\r\nconst returnRoll = diceId => board => {\r\n\tconst roll = findRollInCards(diceId)(board.cards)\r\n\tif(!roll || board.nextAction !== BoardActions.done){\r\n\t\treturn board\r\n\t}\r\n\treturn R.evolve({\r\n\t\tfreePops: R.append(roll),\r\n\t\tcards: removeRollFromCards(diceId),\r\n\t})(board)\r\n}\r\n\r\nconst isCardFullfilled = card => R.all(({testCard}) => testCard(card), card.requirements)\r\nconst isCardFailed = R.complement(isCardFullfilled)\r\nconst isNotNill = R.complement(R.isNil)\r\nconst addFailedCardsRolls =cards => R.concat(R.pipe(\r\n\tR.always(cards),\r\n\tR.filter(isCardFailed),\r\n\tR.map(R.prop('slots')),\r\n\tR.flatten,\r\n\tR.filter(R.propSatisfies(isNotNill, 'selectedRoll')),\r\n\tR.map(R.prop('selectedRoll')),\r\n)())\r\nconst removeRollsIfFailed = R.map(\r\n\tR.when(\r\n\t\tisCardFailed,\r\n\t\tadjustObjectProp('slots',\r\n\t\t\tR.map(adjustObjectProp('selectedRoll', () => undefined)),\r\n\t\t),\r\n\t),\r\n)\r\n\r\nconst removeRollFromFailedCards = board => {\r\n\treturn R.evolve({\r\n\t\tnextAction: () => BoardActions.resolving,\r\n\t\tfreePops: addFailedCardsRolls(board.cards),\r\n\t\tcards: removeRollsIfFailed,\r\n\t})(board)\r\n}\r\n\r\nconst collectAllDiceToRoll = R.evolve({\r\n\tnextAction: () => BoardActions.roll,\r\n\tfreePops: () => [],\r\n\tcards: R.map(adjustObjectProp('slots',\r\n\t\tR.map(adjustObjectProp('selectedRoll', () => undefined)),\r\n\t)),\r\n})\r\n\r\nconst removeCard = cardId => R.evolve({\r\n\tcards: R.filter(card => card.id !== cardId),\r\n})\r\n\r\nconst addCard = name => R.evolve({\r\n\tcards: R.append(createCard(name)),\r\n})\r\n\r\nconst updatePips = ({popId, face, pips, pipsType}) => R.evolve({\r\n\tcards: R.map(adjustObjectProp('slots',\r\n\t\tadjustOnCondition(\r\n\t\t\tslot => slot.selectedRoll && slot.selectedRoll.pop.id === popId,\r\n\t\t\tadjustObjectProp('selectedRoll',\r\n\t\t\t\tadjustObjectProp('pop',\r\n\t\t\t\t\tadjustObjectProp('faces',\r\n\t\t\t\t\t\tR.update(face, {\r\n\t\t\t\t\t\t\tpips,\r\n\t\t\t\t\t\t\ttype: pipsType,\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t),\r\n\t\t\t\t),\r\n\t\t\t),\r\n\t\t),\r\n\t)),\r\n})\r\n\r\nconst boardReducer = (rootState = {}, action = {}) => {\r\n\tconst { board = initialBoard, pops } = rootState\r\n\tconst { type, diceId, cardId, slot, name, force, popId, face, pips, pipsType } = action\r\n\tswitch(type){\r\n\tcase ActionType.roll:\r\n\t\treturn roll(board, pops)\r\n\tcase ActionType.moveRollToSlot:\r\n\t\treturn moveRollToSlot({diceId, cardId, slot, force})(board)\r\n\tcase ActionType.returnRoll:\r\n\t\treturn returnRoll(diceId)(board)\r\n\tcase ActionType.removeRollFromFailedCards:\r\n\t\treturn removeRollFromFailedCards(board)\r\n\tcase ActionType.collectAllDiceToRoll:\r\n\t\treturn collectAllDiceToRoll(board)\r\n\tcase ActionType.removeCard:\r\n\t\treturn removeCard(cardId)(board)\r\n\tcase ActionType.addCard:\r\n\t\treturn addCard(name)(board)\r\n\tcase ActionType.updatePips:\r\n\t\treturn updatePips({popId, face, pips, pipsType})(board)\r\n\tdefault:\r\n\t\treturn board\r\n\t}\r\n}\r\n\r\nexport default boardReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { DndProvider } from 'react-dnd'\nimport DndBackend from 'react-dnd-html5-backend'\nimport './index.css'\n\nimport App from './App'\nimport buildStore from './store/store'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = buildStore({\n\trootReducer,\n\tpreloadedState: undefined,\n})\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<DndProvider backend={DndBackend}>\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t</DndProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { combineReducers } from './util'\r\nimport popsReducer from './popReducer'\r\nimport boardReducer from './boardReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\tpops: popsReducer,\r\n\tboard: boardReducer,\r\n})\r\n\r\nexport default rootReducer\r\n"],"sourceRoot":""}